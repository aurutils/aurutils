#!/bin/bash
# aur-search - search for AUR packages
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=search
AUR_LOCATION=${AUR_LOCATION:-'https://aur.archlinux.org'}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
multiple=section search_by=name-desc sort_key=Name type=search mode=query

# default arguments
query_args=()

hyperlink() {
    local uri=$1 mesg=$2

    if [[ ! -v ALL_OFF ]]; then
        printf "%s" "$mesg"
    fi

    OSC8="\e]8"
    ST="\e\\"
    printf "$OSC8;;%s$ST%s$OSC8;;$ST" "$uri" "$mesg"
}

tabulate() {
    # It is important to have a default value for every field, or
    # parsing of the @tsv result might break.
    # See: https://lists.gnu.org/archive/html/help-bash/2016-05/msg00041.html
    # For arrays, individual elements have to be checked as well.
    # See: https://gitlab.archlinux.org/archlinux/aurweb/-/issues/332
    jq -r --arg key "$1" '
        def sel_join:
            if length > 0 then
                map(if . == "" then "-" else . end) | join(" ")
            else
                "-"
            end;

        [.results[]] | sort_by(.[$key])[] | [
            .Name        // "-",
            .PackageBase // "-",
            .Version     // "-",
            .Description // "-",
            .URL         // "-",

            (.Keywords | sel_join),
            (.License  | sel_join),

            .Maintainer  // "-",
            .NumVotes    // "-",
            .Popularity  // "-",
            .OutOfDate   // "-",

            (.FirstSubmitted | todate),
            (.LastModified   | todate),
            (.Depends        | sel_join),
            (.MakeDepends    | sel_join),
            (.CheckDepends   | sel_join),
            (.OptDepends     | sel_join)
        ] | @tsv'
}

info_long() {
    local -a desc=(
        'Name'
        'Base'
        'Version'
        'Description'
        'URL'
        'Keywords'
        'License'
        'Maintainer'
        'Votes'
        'Popularity'
        'Out Of Date'
        'Submitted'
        'Last Modified'
        'Depends On'
        'Makedepends'
        'Checkdepends'
        'Optdepends'
    )
    local -a info

    while IFS=$'\t' read -r -a info; do
        printf "$BOLD%s:$ALL_OFF\\t%s\\n" "AUR URL" "$AUR_LOCATION/packages/${info[0]}"

        for i in "${!info[@]}"; do
            printf "$BOLD%s:$ALL_OFF\\t%s\\n" "${desc[i]}" "${info[i]}"
        done

        # column(1) ignores empty lines (package delimitation)
        printf '%s\n' '-'
    done
}

info_short() {
    local Name Version NumVotes Popularity Maintainer OutOfDate Description Url Link

    while IFS=$'\t' read -r Name _ Version Description _ _ _ Maintainer NumVotes Popularity OutOfDate _; do
        case $OutOfDate in
            -) unset OutOfDate ;;
            *) printf -v OutOfDate '(Out-of-date: %(%d %B %Y)T)' "$OutOfDate"
        esac

        case $Maintainer in
            -) Maintainer='(Orphaned) ' ;;
            *) unset Maintainer ;;
        esac

        # Unset LC_ALL to ensure it doesn't override LC_NUMERIC.
        LC_ALL='' LC_NUMERIC=C printf -v Popularity '%.2f' "$Popularity"

        Url="${AUR_LOCATION}/packages/${Name}"
        Link="$(hyperlink "$Url" "$(printf '%b' "${BLUE}aur/${ALL_OFF}${BOLD}${Name}")")"

        printf "%s ${GREEN}%s ${ALL_OFF}(+%s %s%%) ${RED}%s%s${ALL_OFF}\\n    %s\\n" \
               "$Link" "$Version" "$NumVotes" "$Popularity" "$Maintainer" "$OutOfDate" "$Description"
    done
}

usage() {
    plain >&2 'usage: %s [-adimnqrsv] [-k key] pkgname...' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    # We use colored messages on both stdout and stderr, and these may
    # be desired even if stdout is not connected to a terminal. (in
    # particular, aur search foo | less -R, #585)
    colorize
fi

opt_short='k:adimnqrsv'
opt_long=('any' 'info' 'search' 'desc' 'maintainer' 'name' 'depends' 'verbose'
          'makedepends' 'optdepends' 'checkdepends' 'key:' 'json' 'short'
          'table' 'stdin-json' 'stdin-table')
opt_hidden=('dump-options' 'raw')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset format
while true; do
    case "$1" in
        -a|--any)
            multiple=union ;;
        -i|--info)
            type=info ;;
        -s|--search)
            type=search ;;
        -d|--desc)
            search_by=name-desc ;;
        -m|--maintainer)
            search_by=maintainer ;;
        -n|--name)
            search_by=name ;;
        --depends)
            search_by=depends ;;
        --makedepends)
            search_by=makedepends ;;
        --optdepends)
            search_by=optdepends ;;
        --checkdepends)
            search_by=checkdepends ;;
        -q|--short)
            format=short ;;
        -v|--verbose)
            format=long ;;
        --table)
            format=table ;;
        --stdin-json)
            mode=stdin_json ;;
        --stdin-table)
            mode=stdin_table ;;
        -r|--raw|--json)
            mode=query_raw ;;
        -k|--key)
            shift; sort_key=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

if ! (( $# )) && ! [[ $mode == "stdin_json" || $mode == "stdin_table" ]]; then
    usage
fi

# set format depending on query type (#319)
case $type in
      info) format=${format-long}  ;;
    search) format=${format-short} ;;
esac

# set filters (1)
case $format in
     long) info() { info_long | column -ts $'\t' | sed -E 's/^-//; $d'; } ;;
    short) info() { info_short; } ;;
    table) info() { tee; } ;;
esac

# set filters (2)
case $multiple in
    section) ;; # aur-query default
      union) query_args+=('--any') ;;
esac

case $mode in
    query)
        aur query -t "$type" -b "$search_by" -e "${query_args[@]}" "$@" | tabulate "$sort_key" | info
        exit "${PIPESTATUS[0]}" ;;
    query_raw)
        aur query -t "$type" -b "$search_by" -e "${query_args[@]}" "$@" ;;
    stdin_json)
        tabulate "$sort_key" | info ;;
    stdin_table)
        info ;;
esac

# vim: set et sw=4 sts=4 ft=sh:

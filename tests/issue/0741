#!/bin/bash
set -e

tmp=$(mktemp -d)
#trap 'rm -rf -- "$tmp"' EXIT
tmp_uid=custom-$RANDOM

cat >"$tmp"/pacman.conf <<EOF
[options]
HoldPkg = pacman-git glibc
Architecture = auto
CheckSpace
[core]
Include = /etc/pacman.d/mirrorlist
[extra]
Include = /etc/pacman.d/mirrorlist
[$tmp_uid]
SigLevel = Optional TrustAll
Server = file://$tmp
EOF

# create local repository
aur repo --root "$tmp" --repo "$tmp_uid" --init

config=(--pacman-conf "$tmp"/pacman.conf)
pkg=aurutils
rev=c07b5215df935cfe02f5c47411d2d717d9bb6aab
ver=17

# checkout and build previous revision
cd "$tmp"
env - HOME=$HOME USER=$USER PATH=$PATH aur fetch "$pkg"

cd "$pkg"
git reset --hard "$rev"
env_unset=(-u AUR_REPO -u AUR_DBROOT -u AUR_DBEXT -u MAKEPKG -u XDG_CACHE_HOME)

env "${env_unset[@]}" AUR_ENV=/dev/null aur build --no-sync \
     -rnd "$tmp_uid" --margs --skippgpcheck --pacman-conf "$tmp"/pacman.conf

fakeroot -- pacman --config "$tmp"/pacman.conf --dbpath "$tmp" -Sy
found_package=$(pacsift --config "$tmp"/pacman.conf --dbpath "$tmp" --repo="$tmp_uid" --satisfies="$pkg=$ver")
[[ -n $found_package ]]

# update to latest revision
cd -
env "${env_unset[@]}" -u AUR_SYNC_NINJA AUR_ENV=/dev/null AURDEST="$tmp" \
    aur sync --no-build --upgrades --ignore-file=/dev/null -d "$tmp_uid" --no-view --pacman-conf "$tmp"/pacman.conf

# build new version
cd "$pkg"
env "${env_unset[@]}" AUR_ENV=/dev/null aur build --no-sync \
    -rnd "$tmp_uid" --margs --skippgpcheck --pacman-conf "$tmp"/pacman.conf

fakeroot -- pacman --config "$tmp"/pacman.conf --dbpath "$tmp" -Sy
found_package=$(pacsift --config "$tmp"/pacman.conf --dbpath "$tmp" --repo="$tmp_uid" --satisfies="$pkg>$ver")
[[ -n $found_package ]]

# vim: set et sw=4 sts=4 ft=sh:\n
